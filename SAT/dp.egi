;;
;; DP algorithm
;;

(define $delete-literals
  (lambda [$l $cnf]
    (map (lambda [$c] (match-all c (multiset integer)
                        [<cons (and !,l $x) _> x]))
         cnf)))

(define $assign-true
  (lambda [$l $cnf]
    (delete-literals (neg l) (delete-clauses-with {l} cnf))))

(define $delete-clauses-with
  (lambda [$ls $cnf]
    (match-all cnf (multiset (multiset integer))
      [<cons (& !<cons ?(lambda [$l] (member? l ls)) _> $c) _> c]))) ; match patternできれいになりそう．

(define $resolve-on
  (lambda [$v $cnf]
    (match-all cnf (multiset (multiset integer))
      [<cons <cons ,v (and <cons $l _> $xs)>
        <cons <cons ,(neg v) (and !<cons ,(neg l) _> $ys)>
          _>>
       (unique {@xs @ys})])))

(define $dp
  (lambda [$vars $cnf]
    (match [vars cnf] [(multiset integer) (multiset (multiset integer))]
      {[[_ <nil>] #t]
       [[_ <cons <nil> _>] #f]
       [[_ <cons <cons $l <nil>> _>] (dp (delete (abs l) vars) (assign-true l cnf))]
       [[<cons $v $vs> !<cons <cons ,(neg v) _> _>] (dp vs (assign-true v cnf))]
       [[<cons $v $vs> !<cons <cons ,v _> _>] (dp vs (assign-true (neg v) cnf))]
       [[<cons $v $vs> _] (dp vs  {@(resolve-on v cnf) @(delete-clauses-with {v (neg v)} cnf)})]
       })))

"dp start"
(dp {1} {{1}}) ; #t
(dp {1} {{1} {-1}}) ; #f
(dp {1 2 3} {{1 2} {-1 3} {1 -3}}) ; #t
(dp {1 2} {{1 2} {-1 -2} {1 -2}}) ; #t
(dp {1 2} {{1 2} {-1 -2} {1 -2} {-1 2}}) ; #f
"dp end"

;;
;; DPLL algorithm
;;

(define $assignment
  (algebraic-data-matcher
    {<deduced integer> <guessed integer something something>}))

(define $dpll'
  (lambda [$vars $cnf $trail]
    (match [vars cnf] [(multiset integer) (multiset (multiset integer))]
      {[[_ <nil>] #t]
       [[_ <cons <nil> _>]
        (match trail (list assignment)
          {[<join _ <cons <guessed $l $vars' $cnf'> $trail'>>
            (dpll' vars' (assign-true (neg l) cnf') {<Deduced (neg l)> @trail'})]
           [_ #f]})]
       [[_ <cons <cons $l <nil>> _>] (dpll' (delete (abs l) vars) (assign-true l cnf) {<Deduced l> @trail})]
       [[<cons $v $vs> !<cons <cons ,(neg v) _> _>] (dpll' vs (assign-true v cnf) {<Deduced v> @trail})]
       [[<cons $v $vs> !<cons <cons ,v _> _>] (dpll' vs (assign-true v cnf) {<Deduced (neg v)> @trail})]
       [[<cons $v $vs> _] (dpll' vs (assign-true v cnf) {<Guessed v vs cnf> @trail})]
       })))

(define $dpll
  (lambda [$vars $cnf]
    (dpll' vars cnf {})))

"dpll start"
(dpll {1} {{1}}) ; #t
(dpll {1} {{1} {-1}}) ; #f
(dpll {1 2 3} {{1 2} {-1 3} {1 -3}}) ; #t
(dpll {1 2} {{1 2} {-1 -2} {1 -2}}) ; #t
(dpll {1 2} {{1 2} {-1 -2} {1 -2} {-1 2}}) ; #f
"dpll end"
